{
  "info": {
    "name": "API CountingDetail Mobile - Test 500 Lignes",
    "description": "Collection Postman pour tester l'API CountingDetail mobile avec support des lots",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000/mobile/api",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Authentification",
      "item": [
        {
          "name": "Login JWT",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        pm.collectionVariables.set('access_token', response.access);",
                  "        console.log('Token JWT récupéré:', response.access);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser_api\",\n  \"password\": \"testpass123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/jwt-login/",
              "host": ["{{base_url}}"],
              "path": ["auth", "jwt-login", ""]
            },
            "description": "Connexion et récupération du token JWT"
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Tests CountingDetail",
      "item": [
        {
          "name": "Validation en lot - 5 lignes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "});",
                  "",
                  "pm.test('Validation successful', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        pm.expect(response.data.total_processed).to.equal(5);",
                  "        console.log('Total traité:', response.data.total_processed);",
                  "        console.log('Valides:', response.data.valid);",
                  "        console.log('Invalides:', response.data.invalid);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": [\n    {\n      \"counting_id\": 2,\n      \"location_id\": 3596,\n      \"quantity_inventoried\": 10,\n      \"assignment_id\": 52,\n      \"product_id\": 11329,\n      \"dlc\": \"2024-12-31\",\n      \"n_lot\": \"LOT001\",\n      \"numeros_serie\": [{\"n_serie\": \"NS001\"}]\n    },\n    {\n      \"counting_id\": 3,\n      \"location_id\": 3597,\n      \"quantity_inventoried\": 5,\n      \"assignment_id\": 53,\n      \"product_id\": 11330\n    },\n    {\n      \"counting_id\": 4,\n      \"location_id\": 3942,\n      \"quantity_inventoried\": 3,\n      \"assignment_id\": 56,\n      \"product_id\": 11331,\n      \"numeros_serie\": [\n        {\"n_serie\": \"NS002\"},\n        {\"n_serie\": \"NS003\"}\n      ]\n    },\n    {\n      \"counting_id\": 5,\n      \"location_id\": 3598,\n      \"quantity_inventoried\": 8,\n      \"assignment_id\": 33,\n      \"product_id\": 11332,\n      \"dlc\": \"2024-11-30\",\n      \"n_lot\": \"LOT002\"\n    },\n    {\n      \"counting_id\": 6,\n      \"location_id\": 3599,\n      \"quantity_inventoried\": 12,\n      \"assignment_id\": 54,\n      \"product_id\": 11333\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/counting-detail/",
              "host": ["{{base_url}}"],
              "path": ["counting-detail", ""]
            },
            "description": "Validation de 5 enregistrements en lot"
          },
          "response": []
        },
        {
          "name": "Création en lot - 5 lignes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "});",
                  "",
                  "pm.test('Creation successful', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        pm.expect(response.data.total_processed).to.equal(5);",
                  "        console.log('Total traité:', response.data.total_processed);",
                  "        console.log('Réussis:', response.data.successful);",
                  "        console.log('Échecs:', response.data.failed);",
                  "        ",
                  "        // Afficher les résultats",
                  "        response.data.results.forEach((result, index) => {",
                  "            console.log(`Index ${index}: ${result.result.action}`);",
                  "            if (result.result.counting_detail) {",
                  "                console.log(`  ID: ${result.result.counting_detail.id}`);",
                  "                console.log(`  Référence: ${result.result.counting_detail.reference}`);",
                  "            }",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"batch\": true,\n  \"data\": [\n    {\n      \"counting_id\": 2,\n      \"location_id\": 3596,\n      \"quantity_inventoried\": 15,\n      \"assignment_id\": 52,\n      \"product_id\": 11329,\n      \"dlc\": \"2024-12-31\",\n      \"n_lot\": \"LOT001\",\n      \"numeros_serie\": [{\"n_serie\": \"NS001\"}]\n    },\n    {\n      \"counting_id\": 3,\n      \"location_id\": 3597,\n      \"quantity_inventoried\": 8,\n      \"assignment_id\": 53,\n      \"product_id\": 11330\n    },\n    {\n      \"counting_id\": 4,\n      \"location_id\": 3942,\n      \"quantity_inventoried\": 5,\n      \"assignment_id\": 56,\n      \"product_id\": 11331,\n      \"numeros_serie\": [\n        {\"n_serie\": \"NS002\"},\n        {\"n_serie\": \"NS003\"}\n      ]\n    },\n    {\n      \"counting_id\": 5,\n      \"location_id\": 3598,\n      \"quantity_inventoried\": 10,\n      \"assignment_id\": 33,\n      \"product_id\": 11332,\n      \"dlc\": \"2024-11-30\",\n      \"n_lot\": \"LOT002\"\n    },\n    {\n      \"counting_id\": 6,\n      \"location_id\": 3599,\n      \"quantity_inventoried\": 18,\n      \"assignment_id\": 54,\n      \"product_id\": 11333\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/counting-detail/",
              "host": ["{{base_url}}"],
              "path": ["counting-detail", ""]
            },
            "description": "Création de 5 enregistrements en lot"
          },
          "response": []
        },
        {
          "name": "Création d'un seul enregistrement",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "});",
                  "",
                  "pm.test('Single creation successful', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        pm.expect(response.data).to.have.property('counting_detail');",
                  "        console.log('CountingDetail créé:', response.data.counting_detail.id);",
                  "        console.log('Référence:', response.data.counting_detail.reference);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"counting_id\": 7,\n  \"location_id\": 3600,\n  \"quantity_inventoried\": 25,\n  \"assignment_id\": 34,\n  \"product_id\": 11334,\n  \"dlc\": \"2025-01-15\",\n  \"n_lot\": \"LOT003\",\n  \"numeros_serie\": [\n    {\"n_serie\": \"NS004\"},\n    {\"n_serie\": \"NS005\"}\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/counting-detail/",
              "host": ["{{base_url}}"],
              "path": ["counting-detail", ""]
            },
            "description": "Création d'un seul enregistrement"
          },
          "response": []
        }
      ]
    },
    {
      "name": "3. Test Performance - 500 Lignes",
      "item": [
        {
          "name": "Validation en lot - 500 lignes",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Charger les données de test depuis un fichier externe",
                  "// Note: En production, vous devriez charger depuis test_data_500_lines.json"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000); // 10 secondes max",
                  "});",
                  "",
                  "pm.test('Validation successful', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        pm.expect(response.data.total_processed).to.equal(500);",
                  "        console.log('=== RÉSULTATS VALIDATION 500 LIGNES ===');",
                  "        console.log('Total traité:', response.data.total_processed);",
                  "        console.log('Valides:', response.data.valid);",
                  "        console.log('Invalides:', response.data.invalid);",
                  "        console.log('Temps de réponse:', pm.response.responseTime + 'ms');",
                  "        ",
                  "        if (response.data.errors && response.data.errors.length > 0) {",
                  "            console.log('Erreurs détectées:', response.data.errors.length);",
                  "            response.data.errors.slice(0, 5).forEach(error => {",
                  "                console.log(`  - Index ${error.index}: ${error.error}`);",
                  "            });",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "file",
              "file": {
                "src": "test_data_500_lines.json"
              }
            },
            "url": {
              "raw": "{{base_url}}/counting-detail/",
              "host": ["{{base_url}}"],
              "path": ["counting-detail", ""]
            },
            "description": "Validation de 500 enregistrements en lot (performance test)"
          },
          "response": []
        },
        {
          "name": "Création en lot - 500 lignes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000); // 30 secondes max",
                  "});",
                  "",
                  "pm.test('Creation successful', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        pm.expect(response.data.total_processed).to.equal(500);",
                  "        console.log('=== RÉSULTATS CRÉATION 500 LIGNES ===');",
                  "        console.log('Total traité:', response.data.total_processed);",
                  "        console.log('Réussis:', response.data.successful);",
                  "        console.log('Échecs:', response.data.failed);",
                  "        console.log('Temps de réponse:', pm.response.responseTime + 'ms');",
                  "        ",
                  "        // Statistiques des actions",
                  "        const actions = {};",
                  "        response.data.results.forEach(result => {",
                  "            const action = result.result.action;",
                  "            actions[action] = (actions[action] || 0) + 1;",
                  "        });",
                  "        console.log('Actions effectuées:', actions);",
                  "        ",
                  "        if (response.data.errors && response.data.errors.length > 0) {",
                  "            console.log('Erreurs détectées:', response.data.errors.length);",
                  "            response.data.errors.slice(0, 5).forEach(error => {",
                  "                console.log(`  - Index ${error.index}: ${error.error}`);",
                  "            });",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "file",
              "file": {
                "src": "test_data_500_lines.json"
              }
            },
            "url": {
              "raw": "{{base_url}}/counting-detail/",
              "host": ["{{base_url}}"],
              "path": ["counting-detail", ""]
            },
            "description": "Création de 500 enregistrements en lot (performance test)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "4. Tests de Consultation",
      "item": [
        {
          "name": "Récupérer CountingDetail par comptage",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has counting details', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        pm.expect(response.data).to.have.property('counting_details');",
                  "        pm.expect(response.data).to.have.property('summary');",
                  "        console.log('Résumé:', response.data.summary);",
                  "        console.log('Nombre de CountingDetail:', response.data.counting_details.length);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/counting-detail/?counting_id=2",
              "host": ["{{base_url}}"],
              "path": ["counting-detail", ""],
              "query": [
                {
                  "key": "counting_id",
                  "value": "2"
                }
              ]
            },
            "description": "Récupération des CountingDetail pour un comptage"
          },
          "response": []
        },
        {
          "name": "Récupérer CountingDetail par emplacement",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has counting details', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        pm.expect(response.data).to.have.property('counting_details');",
                  "        console.log('Nombre de CountingDetail pour l\'emplacement:', response.data.counting_details.length);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/counting-detail/?location_id=3596",
              "host": ["{{base_url}}"],
              "path": ["counting-detail", ""],
              "query": [
                {
                  "key": "location_id",
                  "value": "3596"
                }
              ]
            },
            "description": "Récupération des CountingDetail pour un emplacement"
          },
          "response": []
        }
      ]
    }
  ]
}
