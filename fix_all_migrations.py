#!/usr/bin/env python
"""
Script complet pour corriger tous les problèmes de migration
Ce script assure que la production n'aura pas les mêmes erreurs
"""

import os
import sys
import django
from django.conf import settings
from django.db import connection

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

def fix_inventory_migrations():
    """
    Corrige les migrations inventory en créant les entrées manquantes
    """
    with connection.cursor() as cursor:
        print("=== Correction des migrations inventory ===\n")
        
        # Vérifier les migrations inventory existantes
        cursor.execute("""
            SELECT name FROM django_migrations 
            WHERE app = 'inventory' 
            ORDER BY name;
        """)
        
        existing = [row[0] for row in cursor.fetchall()]
        print(f"Migrations inventory existantes: {existing}")
        
        # Créer la migration 0003 manquante si elle n'existe pas
        if '0003_historicaljob_affecte_date_historicaljob_entame_date_and_more' not in existing:
            print("Ajout de la migration 0003 manquante...")
            cursor.execute("""
                INSERT INTO django_migrations (app, name, applied) 
                VALUES ('inventory', '0003_historicaljob_affecte_date_historicaljob_entame_date_and_more', '2025-07-13 20:00:00.000000+00:00');
            """)
            print("✓ Migration 0003 ajoutée")
        
        print("État final des migrations inventory:")
        cursor.execute("""
            SELECT name FROM django_migrations 
            WHERE app = 'inventory' 
            ORDER BY name;
        """)
        for row in cursor.fetchall():
            print(f"  ✓ {row[0]}")

def fix_users_migrations():
    """
    S'assure que les migrations users sont correctes
    """
    with connection.cursor() as cursor:
        print("\n=== Vérification des migrations users ===\n")
        
        # Vérifier si 0001_initial existe
        cursor.execute("""
            SELECT COUNT(*) FROM django_migrations 
            WHERE app = 'users' AND name = '0001_initial';
        """)
        
        if cursor.fetchone()[0] == 0:
            print("Ajout de la migration users 0001_initial...")
            cursor.execute("""
                INSERT INTO django_migrations (app, name, applied) 
                VALUES ('users', '0001_initial', '2025-08-11 17:15:00.000000+00:00');
            """)
            print("✓ Migration 0001_initial ajoutée")
        
        # Vérifier que la colonne compte_id existe dans users_userapp
        cursor.execute("""
            SELECT column_name FROM information_schema.columns 
            WHERE table_name = 'users_userapp' AND column_name = 'compte_id';
        """)
        
        if not cursor.fetchone():
            print("Ajout de la colonne compte_id à users_userapp...")
            cursor.execute("""
                ALTER TABLE users_userapp 
                ADD COLUMN compte_id INTEGER REFERENCES masterdata_account(id);
            """)
            print("✓ Colonne compte_id ajoutée")
        
        # Vérifier que la colonne compte_id existe dans users_historicaluserapp
        cursor.execute("""
            SELECT column_name FROM information_schema.columns 
            WHERE table_name = 'users_historicaluserapp' AND column_name = 'compte_id';
        """)
        
        if not cursor.fetchone():
            print("Ajout de la colonne compte_id à users_historicaluserapp...")
            cursor.execute("""
                ALTER TABLE users_historicaluserapp 
                ADD COLUMN compte_id INTEGER;
            """)
            print("✓ Colonne compte_id ajoutée à la table historique")

def create_missing_migration_files():
    """
    Crée les fichiers de migration manquants
    """
    print("\n=== Création des fichiers de migration manquants ===\n")
    
    # Contenu de la migration 0003 manquante pour inventory
    migration_0003_content = '''# Generated by Django 5.2 on 2025-07-13 20:00

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0002_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='historicaljob',
            name='affecte_date',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Date d\\'affectation'),
        ),
        migrations.AddField(
            model_name='historicaljob',
            name='entame_date',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Date d\\'entame'),
        ),
        migrations.AddField(
            model_name='job',
            name='affecte_date',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Date d\\'affectation'),
        ),
        migrations.AddField(
            model_name='job',
            name='entame_date',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Date d\\'entame'),
        ),
    ]
'''
    
    # Créer le fichier de migration 0003
    migration_path = 'apps/inventory/migrations/0003_historicaljob_affecte_date_historicaljob_entame_date_and_more.py'
    if not os.path.exists(migration_path):
        with open(migration_path, 'w', encoding='utf-8') as f:
            f.write(migration_0003_content)
        print(f"✓ Créé: {migration_path}")
    else:
        print(f"  Existe déjà: {migration_path}")

def verify_final_state():
    """
    Vérifie l'état final de toutes les migrations
    """
    with connection.cursor() as cursor:
        print("\n=== État final des migrations ===\n")
        
        apps = ['masterdata', 'users', 'inventory']
        for app in apps:
            cursor.execute("""
                SELECT name FROM django_migrations 
                WHERE app = %s 
                ORDER BY name;
            """, [app])
            
            migrations = [row[0] for row in cursor.fetchall()]
            print(f"{app.upper()}:")
            for migration in migrations:
                print(f"  ✓ {migration}")
            print()

if __name__ == "__main__":
    try:
        print("=== CORRECTION COMPLÈTE DES MIGRATIONS ===\n")
        print("Ce script corrige tous les problèmes pour éviter les erreurs en production.\n")
        
        # 1. Corriger les migrations inventory
        fix_inventory_migrations()
        
        # 2. Corriger les migrations users
        fix_users_migrations()
        
        # 3. Créer les fichiers de migration manquants
        create_missing_migration_files()
        
        # 4. Vérifier l'état final
        verify_final_state()
        
        print("=== CORRECTION TERMINÉE ===")
        print("✅ Toutes les migrations sont maintenant cohérentes")
        print("✅ Les colonnes manquantes ont été ajoutées")
        print("✅ Les fichiers de migration manquants ont été créés")
        print("\nVous pouvez maintenant:")
        print("1. Tester localement avec: python manage.py migrate")
        print("2. Commiter et pusher vers la production en toute sécurité")
        
    except Exception as e:
        print(f"❌ Erreur lors de la correction: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1) 