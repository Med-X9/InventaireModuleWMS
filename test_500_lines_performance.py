#!/usr/bin/env python3
"""
Script de test de performance pour l'API CountingDetail mobile avec 500 lignes.
"""

import os
import sys
import django
import json
import requests
import time
from datetime import datetime

# Configuration Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

# Configuration de l'API
BASE_URL = "http://localhost:8000/mobile/api"
LOGIN_URL = f"{BASE_URL}/auth/jwt-login/"
COUNTING_DETAIL_URL = f"{BASE_URL}/counting-detail/"

class Performance500LinesTester:
    def __init__(self):
        self.token = None
        self.headers = {}
        self.test_data = None
        
    def login(self, username="testuser_api", password="testpass123"):
        """Connexion et r√©cup√©ration du token JWT."""
        print("üîê Connexion...")
        
        login_data = {
            "username": username,
            "password": password
        }
        
        try:
            response = requests.post(LOGIN_URL, json=login_data)
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    self.token = data['access']
                    self.headers = {
                        'Authorization': f'Bearer {self.token}',
                        'Content-Type': 'application/json'
                    }
                    print("‚úÖ Connexion r√©ussie")
                    return True
                else:
                    print(f"‚ùå Erreur de connexion: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {str(e)}")
            return False
    
    def load_test_data(self):
        """Charge les donn√©es de test depuis le fichier JSON."""
        print("üìÅ Chargement des donn√©es de test...")
        
        try:
            with open('test_data_500_lines.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            if 'data' in data and len(data['data']) == 500:
                self.test_data = data['data']
                print(f"‚úÖ {len(self.test_data)} enregistrements charg√©s")
                return True
            else:
                print("‚ùå Format de donn√©es invalide ou nombre d'enregistrements incorrect")
                return False
                
        except FileNotFoundError:
            print("‚ùå Fichier test_data_500_lines.json non trouv√©")
            print("üí° Ex√©cutez d'abord: python check_database_for_test.py")
            return False
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement: {str(e)}")
            return False
    
    def test_validation_500_lines(self):
        """Test de validation en lot pour 500 lignes."""
        print("\nüìã Test de validation en lot - 500 lignes...")
        
        validation_data = {
            "data": self.test_data
        }
        
        start_time = time.time()
        
        try:
            response = requests.put(COUNTING_DETAIL_URL, json=validation_data, headers=self.headers)
            
            end_time = time.time()
            response_time = end_time - start_time
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    result = data['data']
                    print(f"‚úÖ Validation r√©ussie:")
                    print(f"   - Total trait√©: {result['total_processed']}")
                    print(f"   - Valides: {result['valid']}")
                    print(f"   - Invalides: {result['invalid']}")
                    print(f"   - Temps de r√©ponse: {response_time:.2f} secondes")
                    print(f"   - Vitesse: {result['total_processed']/response_time:.2f} enregistrements/seconde")
                    
                    if result['errors']:
                        print(f"‚ùå Erreurs d√©tect√©es: {len(result['errors'])}")
                        # Afficher les 5 premi√®res erreurs
                        for error in result['errors'][:5]:
                            print(f"   - Index {error['index']}: {error['error']}")
                    
                    return {
                        'success': True,
                        'response_time': response_time,
                        'total_processed': result['total_processed'],
                        'valid': result['valid'],
                        'invalid': result['invalid'],
                        'errors_count': len(result['errors']) if result['errors'] else 0
                    }
                else:
                    print(f"‚ùå √âchec de validation: {data.get('error')}")
                    return {'success': False, 'error': data.get('error')}
            else:
                print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
                return {'success': False, 'error': f'HTTP {response.status_code}'}
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la validation: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def test_creation_500_lines(self):
        """Test de cr√©ation en lot pour 500 lignes."""
        print("\nüìù Test de cr√©ation en lot - 500 lignes...")
        
        creation_data = {
            "batch": True,
            "data": self.test_data
        }
        
        start_time = time.time()
        
        try:
            response = requests.post(COUNTING_DETAIL_URL, json=creation_data, headers=self.headers)
            
            end_time = time.time()
            response_time = end_time - start_time
            
            if response.status_code == 201:
                data = response.json()
                if data.get('success'):
                    result = data['data']
                    print(f"‚úÖ Cr√©ation r√©ussie:")
                    print(f"   - Total trait√©: {result['total_processed']}")
                    print(f"   - R√©ussis: {result['successful']}")
                    print(f"   - √âchecs: {result['failed']}")
                    print(f"   - Temps de r√©ponse: {response_time:.2f} secondes")
                    print(f"   - Vitesse: {result['total_processed']/response_time:.2f} enregistrements/seconde")
                    
                    # Statistiques des actions
                    actions = {}
                    for item in result['results']:
                        action = item['result']['action']
                        actions[action] = actions.get(action, 0) + 1
                    
                    print(f"   - Actions effectu√©es:")
                    for action, count in actions.items():
                        print(f"     * {action}: {count}")
                    
                    if result['errors']:
                        print(f"‚ùå Erreurs d√©tect√©es: {len(result['errors'])}")
                        # Afficher les 5 premi√®res erreurs
                        for error in result['errors'][:5]:
                            print(f"   - Index {error['index']}: {error['error']}")
                    
                    return {
                        'success': True,
                        'response_time': response_time,
                        'total_processed': result['total_processed'],
                        'successful': result['successful'],
                        'failed': result['failed'],
                        'actions': actions,
                        'errors_count': len(result['errors']) if result['errors'] else 0
                    }
                else:
                    print(f"‚ùå √âchec de cr√©ation: {data.get('error')}")
                    return {'success': False, 'error': data.get('error')}
            else:
                print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
                return {'success': False, 'error': f'HTTP {response.status_code}'}
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def test_update_existing_records(self):
        """Test de mise √† jour d'enregistrements existants."""
        print("\nüîÑ Test de mise √† jour d'enregistrements existants...")
        
        # Prendre les 10 premiers enregistrements et modifier leurs quantit√©s
        update_data = {
            "batch": True,
            "data": []
        }
        
        for i, record in enumerate(self.test_data[:10]):
            updated_record = record.copy()
            updated_record['quantity_inventoried'] = record['quantity_inventoried'] + 100  # Ajouter 100
            update_data['data'].append(updated_record)
        
        start_time = time.time()
        
        try:
            response = requests.post(COUNTING_DETAIL_URL, json=update_data, headers=self.headers)
            
            end_time = time.time()
            response_time = end_time - start_time
            
            if response.status_code == 201:
                data = response.json()
                if data.get('success'):
                    result = data['data']
                    print(f"‚úÖ Mise √† jour r√©ussie:")
                    print(f"   - Total trait√©: {result['total_processed']}")
                    print(f"   - R√©ussis: {result['successful']}")
                    print(f"   - √âchecs: {result['failed']}")
                    print(f"   - Temps de r√©ponse: {response_time:.2f} secondes")
                    
                    # Statistiques des actions
                    actions = {}
                    for item in result['results']:
                        action = item['result']['action']
                        actions[action] = actions.get(action, 0) + 1
                    
                    print(f"   - Actions effectu√©es:")
                    for action, count in actions.items():
                        print(f"     * {action}: {count}")
                    
                    return {
                        'success': True,
                        'response_time': response_time,
                        'total_processed': result['total_processed'],
                        'successful': result['successful'],
                        'failed': result['failed'],
                        'actions': actions
                    }
                else:
                    print(f"‚ùå √âchec de mise √† jour: {data.get('error')}")
                    return {'success': False, 'error': data.get('error')}
            else:
                print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
                return {'success': False, 'error': f'HTTP {response.status_code}'}
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la mise √† jour: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def generate_performance_report(self, results):
        """G√©n√®re un rapport de performance."""
        print(f"\nüìä RAPPORT DE PERFORMANCE")
        print("=" * 50)
        
        total_tests = len(results)
        successful_tests = sum(1 for r in results.values() if r.get('success', False))
        
        print(f"Tests ex√©cut√©s: {total_tests}")
        print(f"Tests r√©ussis: {successful_tests}")
        print(f"Taux de r√©ussite: {(successful_tests/total_tests)*100:.1f}%")
        
        if 'validation' in results and results['validation'].get('success'):
            val = results['validation']
            print(f"\nüìã Validation 500 lignes:")
            print(f"   - Temps: {val['response_time']:.2f}s")
            print(f"   - Vitesse: {val['total_processed']/val['response_time']:.2f} enregistrements/s")
            print(f"   - Valides: {val['valid']}")
            print(f"   - Invalides: {val['invalid']}")
        
        if 'creation' in results and results['creation'].get('success'):
            cre = results['creation']
            print(f"\nüìù Cr√©ation 500 lignes:")
            print(f"   - Temps: {cre['response_time']:.2f}s")
            print(f"   - Vitesse: {cre['total_processed']/cre['response_time']:.2f} enregistrements/s")
            print(f"   - R√©ussis: {cre['successful']}")
            print(f"   - √âchecs: {cre['failed']}")
            if 'actions' in cre:
                print(f"   - Actions: {cre['actions']}")
        
        if 'update' in results and results['update'].get('success'):
            upd = results['update']
            print(f"\nüîÑ Mise √† jour 10 lignes:")
            print(f"   - Temps: {upd['response_time']:.2f}s")
            print(f"   - Vitesse: {upd['total_processed']/upd['response_time']:.2f} enregistrements/s")
            print(f"   - R√©ussis: {upd['successful']}")
            print(f"   - √âchecs: {upd['failed']}")
            if 'actions' in upd:
                print(f"   - Actions: {upd['actions']}")
        
        # Sauvegarder le rapport
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_tests': total_tests,
                'successful_tests': successful_tests,
                'success_rate': (successful_tests/total_tests)*100
            },
            'results': results
        }
        
        with open('performance_report_500_lines.json', 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Rapport sauvegard√© dans performance_report_500_lines.json")
    
    def run_all_tests(self):
        """Ex√©cute tous les tests de performance."""
        print("üöÄ D√âMARRAGE DES TESTS DE PERFORMANCE - 500 LIGNES")
        print("=" * 70)
        
        # Connexion
        if not self.login():
            print("‚ùå Impossible de se connecter. Arr√™t des tests.")
            return False
        
        # Chargement des donn√©es
        if not self.load_test_data():
            print("‚ùå Impossible de charger les donn√©es de test. Arr√™t des tests.")
            return False
        
        # Tests
        results = {}
        
        # Test de validation
        print(f"\n{'='*50}")
        print("üß™ TEST DE VALIDATION - 500 LIGNES")
        print('='*50)
        results['validation'] = self.test_validation_500_lines()
        
        # Test de cr√©ation
        print(f"\n{'='*50}")
        print("üß™ TEST DE CR√âATION - 500 LIGNES")
        print('='*50)
        results['creation'] = self.test_creation_500_lines()
        
        # Test de mise √† jour
        print(f"\n{'='*50}")
        print("üß™ TEST DE MISE √Ä JOUR - 10 LIGNES")
        print('='*50)
        results['update'] = self.test_update_existing_records()
        
        # Rapport de performance
        self.generate_performance_report(results)
        
        # R√©sum√© final
        print(f"\n{'='*70}")
        print("üìä R√âSUM√â FINAL")
        print('='*70)
        
        successful_tests = sum(1 for r in results.values() if r.get('success', False))
        total_tests = len(results)
        
        if successful_tests == total_tests:
            print("üéâ Tous les tests de performance sont pass√©s avec succ√®s!")
            print("‚úÖ L'API CountingDetail mobile est pr√™te pour la production!")
            return True
        else:
            print("‚ö†Ô∏è  Certains tests de performance ont √©chou√©.")
            return False

def main():
    """Fonction principale."""
    tester = Performance500LinesTester()
    success = tester.run_all_tests()
    
    if success:
        print("\n‚úÖ Tests de performance termin√©s avec succ√®s!")
        sys.exit(0)
    else:
        print("\n‚ùå Des probl√®mes ont √©t√© d√©tect√©s lors des tests de performance.")
        sys.exit(1)

if __name__ == "__main__":
    main()
