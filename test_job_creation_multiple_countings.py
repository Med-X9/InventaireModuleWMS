#!/usr/bin/env python
"""
Script de test pour la nouvelle logique de cr√©ation de jobs avec comptages multiples
"""
import os
import sys
import django
from django.utils import timezone

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from apps.inventory.models import Inventory, Counting, Job, JobDetail, Assigment
from apps.masterdata.models import Warehouse, Zone, SousZone, Location, ZoneType, LocationType
from apps.inventory.usecases.job_creation import JobCreationUseCase

def create_test_data():
    """Cr√©e les donn√©es de test n√©cessaires"""
    print("Cr√©ation des donn√©es de test...")
    
    # Cr√©er un warehouse
    warehouse = Warehouse.objects.create(
        warehouse_name="Entrep√¥t Test",
        reference="WH-TEST"
    )
    
    # Cr√©er un type de zone
    zone_type = ZoneType.objects.create(
        reference="ZT-TEST",
        type_name="Type Test",
        status="ACTIVE"
    )
    
    # Cr√©er une zone
    zone = Zone.objects.create(
        zone_name="Zone Test",
        reference="ZONE-TEST",
        warehouse=warehouse,
        zone_type=zone_type,
        zone_status="ACTIVE"
    )
    
    # Cr√©er une sous-zone
    sous_zone = SousZone.objects.create(
        sous_zone_name="Sous-Zone Test",
        reference="SZ-TEST",
        zone=zone
    )
    
    # Cr√©er un type d'emplacement
    location_type = LocationType.objects.create(
        reference="LT-TEST",
        name="Type Emplacement Test",
        is_active=True
    )
    
    # Cr√©er des emplacements
    locations = []
    for i in range(1, 6):
        location = Location.objects.create(
            location_reference=f"LOC-TEST-{i:03d}",
            sous_zone=sous_zone,
            location_type=location_type
        )
        locations.append(location)
    
    # Cr√©er un inventaire avec comptage "image de stock"
    inventory_image_stock = Inventory.objects.create(
        reference="INV-IMAGE-STOCK",
        label="Inventaire Image de Stock",
        date=timezone.now(),
        status="EN PREPARATION",
        inventory_type="GENERAL"
    )
    
    # Cr√©er les comptages pour l'inventaire "image de stock"
    counting1_image = Counting.objects.create(
        reference="CNT-IMG-1",
        order=1,
        count_mode="image de stock",
        inventory=inventory_image_stock
    )
    
    counting2_image = Counting.objects.create(
        reference="CNT-IMG-2",
        order=2,
        count_mode="par article",
        inventory=inventory_image_stock
    )
    
    # Cr√©er un inventaire avec comptage normal
    inventory_normal = Inventory.objects.create(
        reference="INV-NORMAL",
        label="Inventaire Normal",
        date=timezone.now(),
        status="EN PREPARATION",
        inventory_type="GENERAL"
    )
    
    # Cr√©er les comptages pour l'inventaire normal
    counting1_normal = Counting.objects.create(
        reference="CNT-NORM-1",
        order=1,
        count_mode="en vrac",
        inventory=inventory_normal
    )
    
    counting2_normal = Counting.objects.create(
        reference="CNT-NORM-2",
        order=2,
        count_mode="par article",
        inventory=inventory_normal
    )
    
    print(f"‚úÖ Donn√©es de test cr√©√©es:")
    print(f"   - Warehouse: {warehouse.warehouse_name}")
    print(f"   - Emplacements: {len(locations)} cr√©√©s")
    print(f"   - Inventaire 'Image de Stock': {inventory_image_stock.reference}")
    print(f"   - Inventaire 'Normal': {inventory_normal.reference}")
    
    return {
        'warehouse': warehouse,
        'locations': locations,
        'inventory_image_stock': inventory_image_stock,
        'inventory_normal': inventory_normal
    }

def test_job_creation_image_stock(test_data):
    """Test de cr√©ation de job avec configuration 'image de stock'"""
    print("\nüß™ Test 1: Configuration 'Image de Stock'")
    
    use_case = JobCreationUseCase()
    emplacement_ids = [loc.id for loc in test_data['locations']]
    
    try:
        result = use_case.execute(
            test_data['inventory_image_stock'].id,
            test_data['warehouse'].id,
            emplacement_ids
        )
        
        print(f"‚úÖ Job cr√©√© avec succ√®s:")
        print(f"   - Job ID: {result['job_id']}")
        print(f"   - Job Reference: {result['job_reference']}")
        print(f"   - Emplacements: {result['emplacements_count']}")
        print(f"   - Mode 1er comptage: {result['counting1_mode']}")
        print(f"   - Mode 2√®me comptage: {result['counting2_mode']}")
        print(f"   - Assignments cr√©√©s: {result['assignments_created']}")
        
        # V√©rifier les JobDetails
        job = Job.objects.get(id=result['job_id'])
        job_details = JobDetail.objects.filter(job=job)
        print(f"   - JobDetails cr√©√©s: {job_details.count()}")
        
        # V√©rifier les Assignments
        assignments = Assigment.objects.filter(job=job)
        print(f"   - Assignments cr√©√©s: {assignments.count()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return False

def test_job_creation_normal(test_data):
    """Test de cr√©ation de job avec configuration normale"""
    print("\nüß™ Test 2: Configuration 'Normale'")
    
    use_case = JobCreationUseCase()
    emplacement_ids = [loc.id for loc in test_data['locations']]
    
    try:
        result = use_case.execute(
            test_data['inventory_normal'].id,
            test_data['warehouse'].id,
            emplacement_ids
        )
        
        print(f"‚úÖ Job cr√©√© avec succ√®s:")
        print(f"   - Job ID: {result['job_id']}")
        print(f"   - Job Reference: {result['job_reference']}")
        print(f"   - Emplacements: {result['emplacements_count']}")
        print(f"   - Mode 1er comptage: {result['counting1_mode']}")
        print(f"   - Mode 2√®me comptage: {result['counting2_mode']}")
        print(f"   - Assignments cr√©√©s: {result['assignments_created']}")
        
        # V√©rifier les JobDetails
        job = Job.objects.get(id=result['job_id'])
        job_details = JobDetail.objects.filter(job=job)
        print(f"   - JobDetails cr√©√©s: {job_details.count()}")
        
        # V√©rifier les Assignments
        assignments = Assigment.objects.filter(job=job)
        print(f"   - Assignments cr√©√©s: {assignments.count()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return False

def cleanup_test_data():
    """Nettoie les donn√©es de test"""
    print("\nüßπ Nettoyage des donn√©es de test...")
    
    # Supprimer les jobs cr√©√©s
    Job.objects.filter(reference__startswith="JOB-").delete()
    
    # Supprimer les inventaires de test
    Inventory.objects.filter(reference__in=["INV-IMAGE-STOCK", "INV-NORMAL"]).delete()
    
    # Supprimer les emplacements de test
    Location.objects.filter(location_reference__startswith="LOC-TEST-").delete()
    
    # Supprimer les types d'emplacement de test
    LocationType.objects.filter(reference="LT-TEST").delete()
    
    # Supprimer les sous-zones de test
    SousZone.objects.filter(reference="SZ-TEST").delete()
    
    # Supprimer les zones de test
    Zone.objects.filter(reference="ZONE-TEST").delete()
    
    # Supprimer les types de zone de test
    ZoneType.objects.filter(reference="ZT-TEST").delete()
    
    # Supprimer le warehouse de test
    Warehouse.objects.filter(reference="WH-TEST").delete()
    
    print("‚úÖ Donn√©es de test nettoy√©es")

def main():
    """Fonction principale de test"""
    print("üöÄ D√©marrage des tests de cr√©ation de jobs avec comptages multiples")
    
    try:
        # Cr√©er les donn√©es de test
        test_data = create_test_data()
        
        # Test 1: Configuration "image de stock"
        success1 = test_job_creation_image_stock(test_data)
        
        # Test 2: Configuration normale
        success2 = test_job_creation_normal(test_data)
        
        # R√©sum√©
        print("\nüìä R√©sum√© des tests:")
        print(f"   - Test 'Image de Stock': {'‚úÖ R√©ussi' if success1 else '‚ùå √âchou√©'}")
        print(f"   - Test 'Normal': {'‚úÖ R√©ussi' if success2 else '‚ùå √âchou√©'}")
        
        if success1 and success2:
            print("\nüéâ Tous les tests sont pass√©s avec succ√®s!")
        else:
            print("\n‚ö†Ô∏è Certains tests ont √©chou√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {str(e)}")
        
    finally:
        # Nettoyer les donn√©es de test
        cleanup_test_data()

if __name__ == "__main__":
    main()
