#!/usr/bin/env python3
"""
Script de test pour l'API CountingDetail mobile avec support des lots.
Teste la validation et cr√©ation en lot avec v√©rification des enregistrements existants.
"""

import os
import sys
import django
import json
import requests
from datetime import datetime, date

# Configuration Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

# Configuration de l'API
BASE_URL = "http://localhost:8000/mobile/api"
LOGIN_URL = f"{BASE_URL}/auth/jwt-login/"
COUNTING_DETAIL_URL = f"{BASE_URL}/counting-detail/"

class MobileCountingDetailBatchTester:
    def __init__(self):
        self.token = None
        self.headers = {}
        
    def login(self, username="testuser_api", password="testpass123"):
        """Connexion et r√©cup√©ration du token JWT."""
        print("üîê Connexion...")
        
        login_data = {
            "username": username,
            "password": password
        }
        
        try:
            response = requests.post(LOGIN_URL, json=login_data)
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    self.token = data['access']
                    self.headers = {
                        'Authorization': f'Bearer {self.token}',
                        'Content-Type': 'application/json'
                    }
                    print("‚úÖ Connexion r√©ussie")
                    return True
                else:
                    print(f"‚ùå Erreur de connexion: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {str(e)}")
            return False
    
    def test_validation_batch(self):
        """Test de validation en lot."""
        print("\nüìã Test de validation en lot...")
        
        # Donn√©es de test pour la validation
        validation_data = {
            "data": [
                {
                    "counting_id": 1,
                    "location_id": 1,
                    "quantity_inventoried": 10,
                    "assignment_id": 1,
                    "product_id": 1,
                    "dlc": "2024-12-31",
                    "n_lot": "LOT123",
                    "numeros_serie": [{"n_serie": "NS001"}]
                },
                {
                    "counting_id": 1,
                    "location_id": 2,
                    "quantity_inventoried": 5,
                    "assignment_id": 1,
                    "product_id": 2,
                    "dlc": "2024-11-30",
                    "n_lot": "LOT456"
                },
                {
                    "counting_id": 1,
                    "location_id": 3,
                    "quantity_inventoried": 3,
                    "assignment_id": 1,
                    "product_id": 3,
                    "numeros_serie": [
                        {"n_serie": "NS002"},
                        {"n_serie": "NS003"}
                    ]
                }
            ]
        }
        
        try:
            response = requests.put(COUNTING_DETAIL_URL, json=validation_data, headers=self.headers)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    result = data['data']
                    print(f"‚úÖ Validation r√©ussie:")
                    print(f"   - Total trait√©: {result['total_processed']}")
                    print(f"   - Valides: {result['valid']}")
                    print(f"   - Invalides: {result['invalid']}")
                    
                    # Afficher les d√©tails
                    for item in result['results']:
                        print(f"   - Index {item['index']}: {'‚úÖ Valide' if item['valid'] else '‚ùå Invalide'}")
                        print(f"     Existe: {'Oui' if item['exists'] else 'Non'}")
                        print(f"     Action: {item['action_needed']}")
                        if item['existing_id']:
                            print(f"     ID existant: {item['existing_id']}")
                    
                    if result['errors']:
                        print(f"‚ùå Erreurs d√©tect√©es:")
                        for error in result['errors']:
                            print(f"   - Index {error['index']}: {error['error']}")
                    
                    return True
                else:
                    print(f"‚ùå √âchec de validation: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la validation: {str(e)}")
            return False
    
    def test_creation_batch(self):
        """Test de cr√©ation en lot."""
        print("\nüìù Test de cr√©ation en lot...")
        
        # Donn√©es de test pour la cr√©ation
        creation_data = {
            "batch": True,
            "data": [
                {
                    "counting_id": 1,
                    "location_id": 1,
                    "quantity_inventoried": 15,
                    "assignment_id": 1,
                    "product_id": 1,
                    "dlc": "2024-12-31",
                    "n_lot": "LOT123",
                    "numeros_serie": [{"n_serie": "NS001"}]
                },
                {
                    "counting_id": 1,
                    "location_id": 2,
                    "quantity_inventoried": 8,
                    "assignment_id": 1,
                    "product_id": 2,
                    "dlc": "2024-11-30",
                    "n_lot": "LOT456"
                },
                {
                    "counting_id": 1,
                    "location_id": 4,
                    "quantity_inventoried": 7,
                    "assignment_id": 1,
                    "product_id": 4,
                    "numeros_serie": [
                        {"n_serie": "NS004"},
                        {"n_serie": "NS005"}
                    ]
                }
            ]
        }
        
        try:
            response = requests.post(COUNTING_DETAIL_URL, json=creation_data, headers=self.headers)
            
            if response.status_code == 201:
                data = response.json()
                if data.get('success'):
                    result = data['data']
                    print(f"‚úÖ Cr√©ation r√©ussie:")
                    print(f"   - Total trait√©: {result['total_processed']}")
                    print(f"   - R√©ussis: {result['successful']}")
                    print(f"   - √âchecs: {result['failed']}")
                    
                    # Afficher les d√©tails des r√©sultats
                    for item in result['results']:
                        print(f"   - Index {item['index']}: {item['result']['action']}")
                        cd = item['result']['counting_detail']
                        print(f"     ID: {cd['id']}, R√©f√©rence: {cd['reference']}")
                        print(f"     Quantit√©: {cd['quantity_inventoried']}")
                        if item['result'].get('numeros_serie'):
                            print(f"     Num√©ros de s√©rie: {len(item['result']['numeros_serie'])}")
                    
                    if result['errors']:
                        print(f"‚ùå Erreurs d√©tect√©es:")
                        for error in result['errors']:
                            print(f"   - Index {error['index']}: {error['error']}")
                    
                    return True
                else:
                    print(f"‚ùå √âchec de cr√©ation: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation: {str(e)}")
            return False
    
    def test_creation_single(self):
        """Test de cr√©ation d'un seul enregistrement."""
        print("\nüìù Test de cr√©ation d'un seul enregistrement...")
        
        # Donn√©es de test pour un seul enregistrement
        single_data = {
            "counting_id": 1,
            "location_id": 5,
            "quantity_inventoried": 12,
            "assignment_id": 1,
            "product_id": 5,
            "dlc": "2024-10-15",
            "n_lot": "LOT789",
            "numeros_serie": [{"n_serie": "NS006"}]
        }
        
        try:
            response = requests.post(COUNTING_DETAIL_URL, json=single_data, headers=self.headers)
            
            if response.status_code == 201:
                data = response.json()
                if data.get('success'):
                    result = data['data']
                    print(f"‚úÖ Cr√©ation r√©ussie:")
                    cd = result['counting_detail']
                    print(f"   - ID: {cd['id']}")
                    print(f"   - R√©f√©rence: {cd['reference']}")
                    print(f"   - Quantit√©: {cd['quantity_inventoried']}")
                    print(f"   - Produit: {cd['product_id']}")
                    print(f"   - Emplacement: {cd['location_id']}")
                    
                    if result.get('numeros_serie'):
                        print(f"   - Num√©ros de s√©rie: {len(result['numeros_serie'])}")
                        for ns in result['numeros_serie']:
                            print(f"     * {ns['n_serie']} (ID: {ns['id']})")
                    
                    return True
                else:
                    print(f"‚ùå √âchec de cr√©ation: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation: {str(e)}")
            return False
    
    def test_service_import(self):
        """Test d'importation du service mobile."""
        print("\nüîß Test d'importation du service mobile...")
        
        try:
            from apps.mobile.services.counting_detail_service import CountingDetailService
            from apps.mobile.exceptions import CountingDetailValidationError
            
            service = CountingDetailService()
            print("‚úÖ Service mobile import√© avec succ√®s")
            print("‚úÖ Exceptions mobiles import√©es avec succ√®s")
            
            return True
        except ImportError as e:
            print(f"‚ùå Erreur d'importation: {str(e)}")
            return False
        except Exception as e:
            print(f"‚ùå Erreur inattendue: {str(e)}")
            return False
    
    def run_all_tests(self):
        """Ex√©cute tous les tests."""
        print("üöÄ D√©marrage des tests de l'API CountingDetail Mobile avec support des lots")
        print("=" * 70)
        
        # Test de connexion
        if not self.login():
            print("‚ùå Impossible de se connecter. Arr√™t des tests.")
            return False
        
        # Tests
        tests = [
            ("Import du service mobile", self.test_service_import),
            ("Validation en lot", self.test_validation_batch),
            ("Cr√©ation d'un seul enregistrement", self.test_creation_single),
            ("Cr√©ation en lot", self.test_creation_batch)
        ]
        
        results = []
        for test_name, test_func in tests:
            print(f"\n{'='*50}")
            print(f"üß™ {test_name}")
            print('='*50)
            
            try:
                success = test_func()
                results.append((test_name, success))
            except Exception as e:
                print(f"‚ùå Erreur inattendue: {str(e)}")
                results.append((test_name, False))
        
        # R√©sum√©
        print(f"\n{'='*70}")
        print("üìä R√âSUM√â DES TESTS")
        print('='*70)
        
        passed = 0
        for test_name, success in results:
            status = "‚úÖ R√âUSSI" if success else "‚ùå √âCHEC"
            print(f"{status} - {test_name}")
            if success:
                passed += 1
        
        print(f"\nR√©sultat: {passed}/{len(results)} tests r√©ussis")
        
        if passed == len(results):
            print("üéâ Tous les tests sont pass√©s avec succ√®s!")
            return True
        else:
            print("‚ö†Ô∏è  Certains tests ont √©chou√©.")
            return False

def main():
    """Fonction principale."""
    tester = MobileCountingDetailBatchTester()
    success = tester.run_all_tests()
    
    if success:
        print("\n‚úÖ L'API CountingDetail Mobile avec support des lots fonctionne correctement!")
        sys.exit(0)
    else:
        print("\n‚ùå Des probl√®mes ont √©t√© d√©tect√©s avec l'API.")
        sys.exit(1)

if __name__ == "__main__":
    main()
