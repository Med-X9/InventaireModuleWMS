#!/usr/bin/env python
"""
Script pour ajouter des produits de test avec num√©ros de s√©rie
"""
import os
import sys
import django
from django.utils import timezone

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from apps.masterdata.models import Account, Family, Product, NSerie
from apps.users.models import UserApp

def add_test_products():
    """Ajoute des produits de test avec num√©ros de s√©rie"""
    print("üîß Ajout de produits de test...")
    
    # Trouver un compte existant
    accounts = Account.objects.filter(account_statuts='ACTIVE')
    if accounts.count() == 0:
        print("‚ùå Aucun compte actif trouv√©")
        return False
    
    account = accounts.first()
    print(f"‚úÖ Compte trouv√©: {account.account_name}")
    
    # Cr√©er ou r√©cup√©rer une famille
    family, created = Family.objects.get_or_create(
        family_name='Test Family',
        compte=account,
        defaults={
            'family_status': 'ACTIVE',
            'family_description': 'Famille de test'
        }
    )
    
    if created:
        print(f"‚úÖ Famille cr√©√©e: {family.family_name}")
    else:
        print(f"‚úÖ Famille existante: {family.family_name}")
    
    # Cr√©er un produit avec num√©ros de s√©rie
    product_with_nserie, created = Product.objects.get_or_create(
        Internal_Product_Code='TEST-PROD-NS-001',
        defaults={
            'Short_Description': 'Produit avec num√©ros de s√©rie',
            'Barcode': '1234567890125',
            'Product_Group': 'TEST',
            'Stock_Unit': 'PIECE',
            'Product_Status': 'ACTIVE',
            'Product_Family': family,
            'n_serie': True,
            'n_lot': False,
            'dlc': False
        }
    )
    
    if created:
        print(f"‚úÖ Produit avec n_serie cr√©√©: {product_with_nserie.Short_Description}")
    else:
        print(f"‚úÖ Produit avec n_serie existant: {product_with_nserie.Short_Description}")
    
    # Cr√©er des num√©ros de s√©rie pour ce produit
    for i in range(1, 4):
        nserie, created = NSerie.objects.get_or_create(
            n_serie=f'NS-TEST-{i:03d}',
            product=product_with_nserie,
            defaults={
                'status': 'ACTIVE',
                'description': f'Num√©ro de s√©rie de test {i}',
                'date_fabrication': timezone.now().date(),
                'date_expiration': timezone.now().date().replace(year=timezone.now().year + 2),
                'warranty_end_date': timezone.now().date().replace(year=timezone.now().year + 1)
            }
        )
        
        if created:
            print(f"‚úÖ Num√©ro de s√©rie cr√©√©: {nserie.n_serie}")
        else:
            print(f"‚úÖ Num√©ro de s√©rie existant: {nserie.n_serie}")
    
    # Cr√©er un produit sans num√©ros de s√©rie
    product_without_nserie, created = Product.objects.get_or_create(
        Internal_Product_Code='TEST-PROD-NO-NS-001',
        defaults={
            'Short_Description': 'Produit sans num√©ros de s√©rie',
            'Barcode': '1234567890126',
            'Product_Group': 'TEST',
            'Stock_Unit': 'PIECE',
            'Product_Status': 'ACTIVE',
            'Product_Family': family,
            'n_serie': False,
            'n_lot': True,
            'dlc': False
        }
    )
    
    if created:
        print(f"‚úÖ Produit sans n_serie cr√©√©: {product_without_nserie.Short_Description}")
    else:
        print(f"‚úÖ Produit sans n_serie existant: {product_without_nserie.Short_Description}")
    
    print("\nüéâ Produits de test ajout√©s avec succ√®s!")
    return True

def main():
    """Fonction principale"""
    print("üöÄ Ajout de produits de test avec num√©ros de s√©rie")
    
    try:
        success = add_test_products()
        
        if success:
            print("\n‚úÖ Ajout r√©ussi!")
            print("\nüìã Produits cr√©√©s:")
            print("   - TEST-PROD-NS-001: Produit avec num√©ros de s√©rie")
            print("   - TEST-PROD-NO-NS-001: Produit sans num√©ros de s√©rie")
            print("   - 3 num√©ros de s√©rie: NS-TEST-001, NS-TEST-002, NS-TEST-003")
        else:
            print("\n‚ùå Ajout √©chou√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ajout: {str(e)}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    main()
