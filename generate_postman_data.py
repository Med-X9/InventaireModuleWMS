#!/usr/bin/env python
"""
Script pour gÃ©nÃ©rer des donnÃ©es de test pour Postman
Ce script crÃ©e les donnÃ©es nÃ©cessaires et affiche les IDs pour Postman
"""

import os
import sys
import django

# Configuration Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from django.contrib.auth import get_user_model
from apps.inventory.models import *
from apps.masterdata.models import *

User = get_user_model()

def main():
    print("ðŸ”§ GÃ‰NÃ‰RATION DES DONNÃ‰ES POUR POSTMAN")
    print("=" * 60)
    
    # CrÃ©er ou rÃ©cupÃ©rer un utilisateur admin
    user = User.objects.filter(is_superuser=True).first()
    if not user:
        user = User.objects.create_superuser('admin', 'admin@postman.com', 'admin')
        print("âœ… Utilisateur admin crÃ©Ã© (admin/admin)")
    else:
        print(f"âœ… Utilisateur admin existant: {user.username}")
    
    # Compte
    account, created = Account.objects.get_or_create(
        account_name="Postman Test Account",
        defaults={
            'account_statuts': 'ACTIVE',
            'description': 'Compte pour tests Postman'
        }
    )
    print(f"âœ… Compte: {account.account_name} (ID: {account.id})")
    
    # EntrepÃ´t
    warehouse, created = Warehouse.objects.get_or_create(
        name="Postman Warehouse",
        defaults={'account': account}
    )
    print(f"âœ… EntrepÃ´t: {warehouse.name} (ID: {warehouse.id})")
    
    # Emplacements
    locations = []
    for i in range(5):
        location, created = Location.objects.get_or_create(
            name=f"POSTMAN-LOC-{i+1:02d}",
            defaults={'warehouse': warehouse}
        )
        locations.append(location)
    print(f"âœ… Emplacements crÃ©Ã©s: {len(locations)}")
    
    # Produits
    products = []
    for i in range(5):
        product, created = Product.objects.get_or_create(
            Internal_Product_Code=f"POSTMAN-PROD-{i+1:02d}",
            defaults={
                'Short_Description': f'Produit Postman {i+1}',
                'Stock_Unit': 'UnitÃ©',
                'Product_Status': 'ACTIVE',
                'n_lot': i % 2 == 0,
                'n_serie': i % 3 == 0,
                'dlc': i % 2 == 1
            }
        )
        products.append(product)
    print(f"âœ… Produits crÃ©Ã©s: {len(products)}")
    
    # Inventaire
    inventory, created = Inventory.objects.get_or_create(
        name="Postman Inventory",
        defaults={
            'account': account,
            'warehouse': warehouse
        }
    )
    print(f"âœ… Inventaire: {inventory.name} (ID: {inventory.id})")
    
    # Comptages avec diffÃ©rents modes
    countings = []
    modes_config = [
        {'mode': 'en vrac', 'n_lot': True, 'n_serie': False, 'dlc': True},
        {'mode': 'par article', 'n_lot': True, 'n_serie': True, 'dlc': True},
        {'mode': 'image de stock', 'n_lot': False, 'n_serie': True, 'dlc': False}
    ]
    
    for i, config in enumerate(modes_config):
        counting, created = Counting.objects.get_or_create(
            inventory=inventory,
            order=i+1,
            defaults={
                'count_mode': config['mode'],
                'unit_scanned': False,
                'entry_quantity': True,
                'stock_situation': False,
                'is_variant': False,
                'n_lot': config['n_lot'],
                'n_serie': config['n_serie'],
                'dlc': config['dlc'],
                'show_product': True,
                'quantity_show': True
            }
        )
        countings.append(counting)
    print(f"âœ… Comptages crÃ©Ã©s: {len(countings)}")
    
    # Job et Assignment
    job, created = Job.objects.get_or_create(
        inventory=inventory,
        defaults={}
    )
    
    assignment, created = Assigment.objects.get_or_create(
        job=job,
        user=user,
        defaults={'status': 'EN COURS'}
    )
    print(f"âœ… Job et Assignment crÃ©Ã©s")
    
    # Affichage des IDs pour Postman
    print(f"\nðŸ“‹ CONFIGURATION POSTMAN")
    print("=" * 40)
    print("Copiez ces valeurs dans vos variables Postman :")
    print()
    print("ðŸ”§ Variables de Collection :")
    print(f"   base_url: http://localhost:8000")
    print(f"   counting_id_vrac: {countings[0].id}")
    print(f"   counting_id_article: {countings[1].id}")
    print(f"   counting_id_stock: {countings[2].id}")
    print(f"   location_id: {locations[0].id}")
    print(f"   product_id: {products[0].id}")
    print(f"   assignment_id: {assignment.id}")
    print()
    print("ðŸ‘¤ Authentification :")
    print(f"   username: admin")
    print(f"   password: admin")
    print()
    
    # DÃ©tails des donnÃ©es crÃ©Ã©es
    print("ðŸ“Š DÃ‰TAILS DES DONNÃ‰ES CRÃ‰Ã‰ES :")
    print(f"   â€¢ Compte: {account.account_name}")
    print(f"   â€¢ EntrepÃ´t: {warehouse.name}")
    print(f"   â€¢ Emplacements: {', '.join([loc.name for loc in locations])}")
    print(f"   â€¢ Produits: {', '.join([prod.Internal_Product_Code for prod in products])}")
    print()
    print("ðŸ“‹ Comptages crÃ©Ã©s :")
    for i, counting in enumerate(countings, 1):
        print(f"   {i}. {counting.count_mode} (ID: {counting.id})")
        print(f"      - NÂ°Lot: {'Oui' if counting.n_lot else 'Non'}")
        print(f"      - NÂ°SÃ©rie: {'Oui' if counting.n_serie else 'Non'}")
        print(f"      - DLC: {'Oui' if counting.dlc else 'Non'}")
    
    print(f"\nâœ… DONNÃ‰ES PRÃŠTES POUR POSTMAN!")
    print("=" * 40)
    print("1. Importez la collection Postman_CountingDetail_Collection.json")
    print("2. Configurez les variables avec les IDs ci-dessus")
    print("3. Lancez les tests !")
    print()
    print("ðŸ’¡ Pour tester 1000 lignes :")
    print("   - SÃ©lectionnez les tests de crÃ©ation")
    print("   - Configurez 250 iterations")
    print("   - Lancez la collection")

if __name__ == "__main__":
    main()
