{
	"info": {
		"_postman_id": "counting-detail-api-test",
		"name": "CountingDetail API - Test Complet",
		"description": "Collection complète pour tester l'API CountingDetail avec tous les cas de test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "api_base",
			"value": "{{base_url}}/mobile/api",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "counting_id_vrac",
			"value": "1",
			"type": "string"
		},
		{
			"key": "counting_id_article",
			"value": "2",
			"type": "string"
		},
		{
			"key": "counting_id_stock",
			"value": "3",
			"type": "string"
		},
		{
			"key": "location_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "product_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "assignment_id",
			"value": "1",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "1. Authentification",
			"item": [
				{
					"name": "Login JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('jwt_token', response.access_token);",
									"    pm.test('Token récupéré avec succès', function () {",
									"        pm.expect(response.access_token).to.exist;",
									"    });",
									"} else {",
									"    pm.test('Erreur d\\'authentification', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 401, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{api_base}}/auth/jwt-login/",
							"host": ["{{api_base}}"],
							"path": ["auth", "jwt-login", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Tests de Création",
			"item": [
				{
					"name": "Test 1 - Mode En Vrac (Sans Produit)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('CountingDetail created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('counting_detail');",
									"    pm.expect(jsonData.data.counting_detail).to.have.property('id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"counting_id\": {{counting_id_vrac}},\n    \"location_id\": {{location_id}},\n    \"quantity_inventoried\": 25,\n    \"assignment_id\": {{assignment_id}},\n    \"dlc\": \"2024-12-31\",\n    \"n_lot\": \"LOT-VRAC-001\"\n}"
						},
						"url": {
							"raw": "{{api_base}}/counting-detail/",
							"host": ["{{api_base}}"],
							"path": ["counting-detail", ""]
						}
					},
					"response": []
				},
				{
					"name": "Test 2 - Mode Par Article (Avec Produit)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has success field', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test('Product included in response', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.counting_detail).to.have.property('product_id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"counting_id\": {{counting_id_article}},\n    \"location_id\": {{location_id}},\n    \"quantity_inventoried\": 15,\n    \"assignment_id\": {{assignment_id}},\n    \"product_id\": {{product_id}},\n    \"dlc\": \"2024-11-30\",\n    \"n_lot\": \"LOT-ART-001\"\n}"
						},
						"url": {
							"raw": "{{api_base}}/counting-detail/",
							"host": ["{{api_base}}"],
							"path": ["counting-detail", ""]
						}
					},
					"response": []
				},
				{
					"name": "Test 3 - Avec Numéros de Série",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Numéros de série créés', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('numeros_serie');",
									"    pm.expect(jsonData.data.numeros_serie).to.be.an('array');",
									"    pm.expect(jsonData.data.numeros_serie.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"counting_id\": {{counting_id_stock}},\n    \"location_id\": {{location_id}},\n    \"quantity_inventoried\": 3,\n    \"assignment_id\": {{assignment_id}},\n    \"product_id\": {{product_id}},\n    \"numeros_serie\": [\n        {\"n_serie\": \"NS001-2024-POSTMAN\"},\n        {\"n_serie\": \"NS002-2024-POSTMAN\"},\n        {\"n_serie\": \"NS003-2024-POSTMAN\"}\n    ]\n}"
						},
						"url": {
							"raw": "{{api_base}}/counting-detail/",
							"host": ["{{api_base}}"],
							"path": ["counting-detail", ""]
						}
					},
					"response": []
				},
				{
					"name": "Test 4 - Cas Complet (Toutes Propriétés)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('All properties included', function () {",
									"    const jsonData = pm.response.json();",
									"    const cd = jsonData.data.counting_detail;",
									"    pm.expect(cd).to.have.property('product_id');",
									"    // Vérifier que les propriétés optionnelles sont présentes si envoyées",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"counting_id\": {{counting_id_article}},\n    \"location_id\": {{location_id}},\n    \"quantity_inventoried\": 50,\n    \"assignment_id\": {{assignment_id}},\n    \"product_id\": {{product_id}},\n    \"dlc\": \"2025-06-15\",\n    \"n_lot\": \"LOT-COMPLET-2024\",\n    \"numeros_serie\": [\n        {\"n_serie\": \"NS-COMPLET-001-2024\"},\n        {\"n_serie\": \"NS-COMPLET-002-2024\"}\n    ]\n}"
						},
						"url": {
							"raw": "{{api_base}}/counting-detail/",
							"host": ["{{api_base}}"],
							"path": ["counting-detail", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Tests de Validation",
			"item": [
				{
					"name": "Test Validation - Données Manquantes (counting_id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Error message present', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"location_id\": {{location_id}},\n    \"quantity_inventoried\": 10,\n    \"assignment_id\": {{assignment_id}}\n}"
						},
						"url": {
							"raw": "{{api_base}}/counting-detail/",
							"host": ["{{api_base}}"],
							"path": ["counting-detail", ""]
						}
					},
					"response": []
				},
				{
					"name": "Test Validation - Quantité Négative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Validation error for negative quantity', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"counting_id\": {{counting_id_vrac}},\n    \"location_id\": {{location_id}},\n    \"quantity_inventoried\": -5,\n    \"assignment_id\": {{assignment_id}}\n}"
						},
						"url": {
							"raw": "{{api_base}}/counting-detail/",
							"host": ["{{api_base}}"],
							"path": ["counting-detail", ""]
						}
					},
					"response": []
				},
				{
					"name": "Test Validation - Mode Par Article Sans Produit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Error for missing product in par article mode', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error).to.include('produit');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"counting_id\": {{counting_id_article}},\n    \"location_id\": {{location_id}},\n    \"quantity_inventoried\": 10,\n    \"assignment_id\": {{assignment_id}}\n}"
						},
						"url": {
							"raw": "{{api_base}}/counting-detail/",
							"host": ["{{api_base}}"],
							"path": ["counting-detail", ""]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Tests de Récupération",
			"item": [
				{
					"name": "Récupérer par Comptage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Data retrieved successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('counting_details');",
									"    pm.expect(jsonData.data.counting_details).to.be.an('array');",
									"});",
									"",
									"pm.test('Summary included', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('summary');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_base}}/counting-detail/?counting_id={{counting_id_vrac}}",
							"host": ["{{api_base}}"],
							"path": ["counting-detail", ""],
							"query": [
								{
									"key": "counting_id",
									"value": "{{counting_id_vrac}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Récupérer par Emplacement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Location data retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_base}}/counting-detail/?location_id={{location_id}}",
							"host": ["{{api_base}}"],
							"path": ["counting-detail", ""],
							"query": [
								{
									"key": "location_id",
									"value": "{{location_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Récupérer par Produit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Product data retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_base}}/counting-detail/?product_id={{product_id}}",
							"host": ["{{api_base}}"],
							"path": ["counting-detail", ""],
							"query": [
								{
									"key": "product_id",
									"value": "{{product_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Tests de Performance",
			"item": [
				{
					"name": "Test Performance - Lot de 10",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Initialiser le compteur",
									"pm.collectionVariables.set('performance_count', 0);",
									"pm.collectionVariables.set('performance_success', 0);",
									"pm.collectionVariables.set('performance_errors', 0);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Mesurer le temps de réponse",
									"pm.test('Response time is acceptable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"// Compter les succès/erreurs",
									"let count = pm.collectionVariables.get('performance_count') || 0;",
									"let success = pm.collectionVariables.get('performance_success') || 0;",
									"let errors = pm.collectionVariables.get('performance_errors') || 0;",
									"",
									"count++;",
									"if (pm.response.code === 201) {",
									"    success++;",
									"} else {",
									"    errors++;",
									"}",
									"",
									"pm.collectionVariables.set('performance_count', count);",
									"pm.collectionVariables.set('performance_success', success);",
									"pm.collectionVariables.set('performance_errors', errors);",
									"",
									"console.log(`Performance Test ${count}: ${pm.response.code} in ${pm.response.responseTime}ms`);",
									"",
									"if (count >= 10) {",
									"    console.log(`Performance Summary: ${success}/${count} success (${(success/count*100).toFixed(1)}%)`);",
									"    console.log(`Average response time: ${pm.response.responseTime}ms`);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"counting_id\": {{counting_id_vrac}},\n    \"location_id\": {{location_id}},\n    \"quantity_inventoried\": {{$randomInt}},\n    \"assignment_id\": {{assignment_id}},\n    \"n_lot\": \"LOT-PERF-{{$randomInt}}\"\n}"
						},
						"url": {
							"raw": "{{api_base}}/counting-detail/",
							"host": ["{{api_base}}"],
							"path": ["counting-detail", ""]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Variables globales pour les tests",
					"console.log('Collection CountingDetail API - Test en cours...');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Tests globaux après chaque requête",
					"pm.test('Response format is JSON', function () {",
					"    pm.response.to.be.json;",
					"});"
				]
			}
		}
	]
}
