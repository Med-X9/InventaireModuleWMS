#!/usr/bin/env python
"""
Script de test simple pour la nouvelle logique de cr√©ation de jobs avec comptages multiples
"""
import os
import sys
import django
from django.utils import timezone

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from apps.inventory.models import Inventory, Counting, Job, JobDetail, Assigment
from apps.masterdata.models import Warehouse, Location
from apps.inventory.usecases.job_creation import JobCreationUseCase

def test_with_existing_data():
    """Test avec des donn√©es existantes"""
    print("üîç Recherche de donn√©es existantes...")
    
    # V√©rifier s'il y a des inventaires
    inventories = Inventory.objects.all()
    print(f"   - Inventaires trouv√©s: {inventories.count()}")
    
    # V√©rifier s'il y a des warehouses
    warehouses = Warehouse.objects.all()
    print(f"   - Warehouses trouv√©s: {warehouses.count()}")
    
    # V√©rifier s'il y a des emplacements
    locations = Location.objects.all()
    print(f"   - Emplacements trouv√©s: {locations.count()}")
    
    if inventories.count() == 0:
        print("‚ùå Aucun inventaire trouv√©. Cr√©ez d'abord un inventaire.")
        return False
    
    if warehouses.count() == 0:
        print("‚ùå Aucun warehouse trouv√©. Cr√©ez d'abord un warehouse.")
        return False
    
    if locations.count() == 0:
        print("‚ùå Aucun emplacement trouv√©. Cr√©ez d'abord des emplacements.")
        return False
    
    # Prendre le premier inventaire
    inventory = inventories.first()
    print(f"   - Utilisation de l'inventaire: {inventory.reference}")
    
    # V√©rifier les comptages de l'inventaire
    countings = Counting.objects.filter(inventory=inventory).order_by('order')
    print(f"   - Comptages trouv√©s: {countings.count()}")
    
    if countings.count() < 2:
        print("‚ùå L'inventaire doit avoir au moins 2 comptages.")
        return False
    
    # Prendre le premier warehouse
    warehouse = warehouses.first()
    print(f"   - Utilisation du warehouse: {warehouse.warehouse_name}")
    
    # Prendre les 3 premiers emplacements
    test_locations = locations[:3]
    print(f"   - Utilisation de {len(test_locations)} emplacements")
    
    # Test de cr√©ation de job
    print("\nüß™ Test de cr√©ation de job...")
    
    use_case = JobCreationUseCase()
    emplacement_ids = [loc.id for loc in test_locations]
    
    try:
        result = use_case.execute(
            inventory.id,
            warehouse.id,
            emplacement_ids
        )
        
        print(f"‚úÖ Job cr√©√© avec succ√®s:")
        print(f"   - Job ID: {result['job_id']}")
        print(f"   - Job Reference: {result['job_reference']}")
        print(f"   - Emplacements: {result['emplacements_count']}")
        print(f"   - Mode 1er comptage: {result['counting1_mode']}")
        print(f"   - Mode 2√®me comptage: {result['counting2_mode']}")
        print(f"   - Assignments cr√©√©s: {result['assignments_created']}")
        
        # V√©rifier les JobDetails
        job = Job.objects.get(id=result['job_id'])
        job_details = JobDetail.objects.filter(job=job)
        print(f"   - JobDetails cr√©√©s: {job_details.count()}")
        
        # V√©rifier les Assignments
        assignments = Assigment.objects.filter(job=job)
        print(f"   - Assignments cr√©√©s: {assignments.count()}")
        
        # Nettoyer le job cr√©√©
        job.delete()
        print("   - Job de test supprim√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test de cr√©ation de jobs avec donn√©es existantes")
    
    try:
        success = test_with_existing_data()
        
        if success:
            print("\nüéâ Test r√©ussi!")
        else:
            print("\n‚ö†Ô∏è Test √©chou√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {str(e)}")

if __name__ == "__main__":
    main()
